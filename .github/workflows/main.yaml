name: 'build and push to ghcr'

on: push

env:
  IMAGE_NAME: 'kafka-to-gps-connector'
  REGISTRY: 'ghcr.io'

jobs:
  lower-case-owner:
    runs-on: ubuntu-latest
    outputs:
      REPO_OWNER: ${{ steps.step1.outputs.REPO_OWNER }}
    steps:
      - name: LowerCase repo owner
        id: 'step1'
        run: |
          echo "::set-output name=REPO_OWNER::${GITHUB_REPOSITORY_OWNER,,}"

  get-gitversion:
    runs-on: ubuntu-latest
    needs: [lower-case-owner]
    outputs:
      GITVERSION_SEMVER: ${{ steps.step4.outputs.GITVERSION_SEMVER_LC }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.10
        with:
          versionSpec: '5.x'

      - name: Execute GitVersion
        uses: gittools/actions/gitversion/execute@v0.9.10
        with:
          useConfigFile: false

      - name: 'Set version in ${GITHUB_ENV}'
        id: 'step4'
        run: |
          echo "::set-output name=GITVERSION_SEMVER_LC::$GITVERSION_SEMVER"

  build-n-push:
    runs-on: ubuntu-latest
    if: endsWith(github.ref, '/master')
    needs: [get-gitversion]
    env:
      GITVERSION_SEMVER: ${{ needs.build-n-push.outputs.GITVERSION_SEMVER }}
      REPO_OWNER: ${{ needs.lower-case-owner.outputs.REPO_OWNER }}
    # container:
    #   image: docker:stable
    # defaults:
    #   run:
    #     # Force sh since bash is not supported in docker:stable
    #     shell: sh
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Display SemVer
        run: |
          echo "SemVer: $GITVERSION_SEMVER"

      - name: Build and push to registry
        run: |
          docker build -t ${{ env.REGISTRY }}/$REPO_OWNER/${{ env.IMAGE_NAME }}:$GITVERSION_SEMVER \
                       -t ${{ env.REGISTRY }}/$REPO_OWNER/${{ env.IMAGE_NAME }}:latest .
          docker push -a ${{ env.REGISTRY }}/$REPO_OWNER/${{ env.IMAGE_NAME }}
